#!/bin/bash

# configure, reconfigure

set -e

# Source debconf library.
. /usr/share/debconf/confmodule

db_version 2.0

# This configuration file allows the user to back up
db_capb backup

OUTSTATE=2
STATE=1

echo "CONFIGURE called with $@"
echo "============================"

while [ "$STATE" != "0" -a "$STATE" != "$OUTSTATE" ]; do
  if [ $STATE -eq 1 ]; then
    fIndex=$(($STATE / 10))
    fState=$(($STATE % 10))
    fNextState=$((($fIndex+1)*10))
    # this state is special and is executed only once.
    echo ""
    echo "  FIRST"
    echo "  ====="
    
    echo "  configure: getting current instances"
    db_get salor-retail/current-instances || true
    gOldInstances="${RET}"
    
    echo "  configure: inputting new current instances"
    db_input medium salor-retail/current-instances || true # the default is 'default' and is defined in the template
    if db_go; then
      echo "  configure: leaving this state after it is finished"
      STATE=$fNextState # configure first package
    else
      #echo "  configure: going to previous step after this state is finished"
      #STATE=$(($STATE - 1))
      echo "  configure: User has aborted. Not calling postinst since nothing to do."
      exit 1
    fi
    
    echo "  configure: getting new current instances"
    db_get salor-retail/current-instances || true
    gNewInstances="${RET}"
    gRemovedInstances=""
    
    echo "  configure: collecting removed instances"
    for lOld in $gOldInstances; do
      lFound=0
      for lCur in $gNewInstances; do
        if [ $lCur = $lOld ]; then
          lFound=1
          break
        fi
      done
      if [ $lFound -eq 0 ]; then
        if [ -z "$gRemovedInstances" ]; then gRemovedInstances="$lOld";
        else gRemovedInstances="$gRemovedInstances $lOld";
        fi
      fi
    done
    echo "  configure: setting removed instances $gRemovedInstances"
    db_set salor-retail/old-instances "$gRemovedInstances"
    
    gNb=$(echo "$gNewInstances" | wc -w)
    OUTSTATE=$((($gNb+1) * 10)) # e.g. outstate is 30 for 2 app instances
    echo "  configure: setting new outstate to $OUTSTATE"
    
    availableUsers=`ls -m /home`
    availableUsers="${availableUsers}, www-data"
    
    db_input medium salor-retail/user || true
    db_subst salor-retail/user availableUsers $availableUsers
    db_go


  else
    # states 10, 20 30 etc.
    fIndex=$(($STATE / 10))
    fState=$(($STATE % 10))
    fNextState=$((($fIndex+1)*10))
    
    if [ $fIndex -gt 0 ]; then
      fPreviousState=$((($fIndex-1)*10))
    else
      fPreviousState=0
    fi
    
    fInstance=$(eval "echo \"$gNewInstances\" | awk '{print \$$fIndex}'")
    echo ""
    echo "STATE $STATE for instance $fInstance"
    echo "===================================="
    
    case "$fState" in
    0)
      echo ""
      echo "  CASE 0"
      echo "  ------"
      if [ -f /usr/share/dbconfig-common/dpkg/config.mysql ]; then
        dbc_dbname=sr_$fInstance
        dbc_dbuser=sruser$fInstance
        if [ ! -f /etc/salor-retail/$fInstance/database.yml.lock ]; then
          ( . /usr/share/dbconfig-common/dpkg/config.mysql ; dbc_go salor-retail/instances/$fInstance $@ )
          if [ $? -ne 0 ] ; then
            echo "  configure: going to previous instance"
            STATE=$fPreviousState
            continue
          fi
        else
          echo "  configure: not touching instance $fInstance because of database.yml.lock."
        fi

        db_get salor-retail/instances/$fInstance/dbconfig-install || true
        if [ "$RET" != "true" ]; then
          echo "  $fInstance NOT going to be configured with dbc_go, leaving this instance."
          STATE=$fNextState
        else
          echo "  $fInstance IS going to be configured with dbc_go, going to next step."
          STATE=$(($STATE + 1))
        fi
      else
        echo "  dbconfig-common is not supported. Exiting."
        STATE=$OUTSTATE
      fi
    ;;
    
    1)
      echo ""
      echo "  CASE 1 (placeholder for more logic)"
      echo "  ------"
      if true; then
        echo "  Leaving this instance."
        STATE=$fNextState
      else
        echo "  Going to previous step."
        STATE=$(($STATE - 1))
      fi
    esac
  fi
done

#DEBHELPER#